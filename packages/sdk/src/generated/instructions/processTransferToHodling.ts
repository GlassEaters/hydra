/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import { TransferToArgs, transferToArgsBeet } from "../types/TransferToArgs";

/**
 * @category Instructions
 * @category ProcessTransferToHodling
 * @category generated
 */
export type ProcessTransferToHodlingInstructionArgs = {
  args: TransferToArgs;
};
/**
 * @category Instructions
 * @category ProcessTransferToHodling
 * @category generated
 */
const processTransferToHodlingStruct = new beet.BeetArgsStruct<
  ProcessTransferToHodlingInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["args", transferToArgsBeet],
  ],
  "ProcessTransferToHodlingInstructionArgs"
);
/**
 * Accounts required by the _processTransferToHodling_ instruction
 * @category Instructions
 * @category ProcessTransferToHodling
 * @category generated
 */
export type ProcessTransferToHodlingInstructionAccounts = {
  fanout: web3.PublicKey;
  holdingAccount: web3.PublicKey;
};

const processTransferToHodlingInstructionDiscriminator = [
  16, 112, 74, 44, 106, 43, 83, 76,
];

/**
 * Creates a _ProcessTransferToHodling_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessTransferToHodling
 * @category generated
 */
export function createProcessTransferToHodlingInstruction(
  accounts: ProcessTransferToHodlingInstructionAccounts,
  args: ProcessTransferToHodlingInstructionArgs
) {
  const { fanout, holdingAccount } = accounts;

  const [data] = processTransferToHodlingStruct.serialize({
    instructionDiscriminator: processTransferToHodlingInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: holdingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg"
    ),
    keys,
    data,
  });
  return ix;
}
