/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as definedTypes from "../types";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category ProcessAddMemberToken
 * @category generated
 */
export type ProcessAddMemberTokenInstructionArgs = {
  args: definedTypes.AddMemberArgs;
};
/**
 * @category Instructions
 * @category ProcessAddMemberToken
 * @category generated
 */
const processAddMemberTokenStruct = new beet.BeetArgsStruct<
  ProcessAddMemberTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["args", definedTypes.addMemberArgsBeet],
  ],
  "ProcessAddMemberTokenInstructionArgs"
);
/**
 * Accounts required by the _processAddMemberToken_ instruction
 * @category Instructions
 * @category ProcessAddMemberToken
 * @category generated
 */
export type ProcessAddMemberTokenInstructionAccounts = {
  authority: web3.PublicKey;
  membershipKey: web3.PublicKey;
  membershipMintTokenAccount: web3.PublicKey;
  fanout: web3.PublicKey;
  membershipMint: web3.PublicKey;
};

const processAddMemberTokenInstructionDiscriminator = [
  67, 131, 134, 138, 80, 103, 209, 1,
];

/**
 * Creates a _ProcessAddMemberToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessAddMemberToken
 * @category generated
 */
export function createProcessAddMemberTokenInstruction(
  accounts: ProcessAddMemberTokenInstructionAccounts,
  args: ProcessAddMemberTokenInstructionArgs
) {
  const {
    authority,
    membershipKey,
    membershipMintTokenAccount,
    fanout,
    membershipMint,
  } = accounts;

  const [data] = processAddMemberTokenStruct.serialize({
    instructionDiscriminator: processAddMemberTokenInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: membershipKey,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: membershipMintTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"
    ),
    keys,
    data,
  });
  return ix;
}
